"""create_scheduled_jobs_table_v2

Revision ID: aaf84b4b99c7
Revises: 20250912_create_scheduled_jobs
Create Date: 2025-09-12 17:32:05.940731+09:00

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'aaf84b4b99c7'
down_revision: Union[str, Sequence[str], None] = '20250912_create_scheduled_jobs'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('scheduled_jobs',
    sa.Column('id', sa.String(length=36), nullable=False, comment='작업 고유 ID'),
    sa.Column('name', sa.String(length=120), nullable=False, comment='작업 이름'),
    sa.Column('func', sa.String(length=200), nullable=False, comment='실행할 함수 (module:function 형태)'),
    sa.Column('cron', sa.String(length=64), nullable=False, comment='Cron 표현식'),
    sa.Column('args', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='함수 인자'),
    sa.Column('kwargs', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='함수 키워드 인자'),
    sa.Column('enabled', sa.Boolean(), nullable=False, comment='작업 활성화 여부'),
    sa.Column('last_run_at', sa.TIMESTAMP(timezone=True), nullable=True, comment='마지막 실행 시간'),
    sa.Column('next_run_at', sa.TIMESTAMP(timezone=True), nullable=True, comment='다음 실행 시간'),
    sa.Column('status', sa.String(length=32), nullable=False, comment='작업 상태 (idle, running, failed, completed)'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='논리 삭제 여부'),
    sa.Column('deleted_at', sa.TIMESTAMP(timezone=True), nullable=True, comment='논리 삭제 시간'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='생성 시간'),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='수정 시간'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_scheduled_jobs_enabled', 'scheduled_jobs', ['enabled'], unique=False)
    op.create_index('ix_scheduled_jobs_is_deleted', 'scheduled_jobs', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_scheduled_jobs_name'), 'scheduled_jobs', ['name'], unique=True)
    op.create_index('ix_scheduled_jobs_next_run', 'scheduled_jobs', ['next_run_at'], unique=False)
    op.create_index('ix_scheduled_jobs_status', 'scheduled_jobs', ['status'], unique=False)
    op.drop_table('user_profiles')
    op.drop_table('sensor_raw_mq7')
    op.drop_table('sensor_edge_reed')
    op.drop_table('sensor_raw_loadcell')
    op.drop_table('sensor_edge_flame')
    op.drop_table('sensor_raw_temperature')
    op.drop_table('actuator_log_relay')
    op.drop_table('actuator_log_buzzer')
    op.drop_table('user_relationships')
    op.drop_table('sensor_edge_tilt')
    op.drop_table('actuator_log_ir_tx')
    op.drop_table('sensor_raw_tcrt5000')
    op.drop_table('actuator_log_servo')
    op.drop_table('sensor_event_button')
    op.drop_table('sensor_raw_flame')
    op.drop_table('users')
    op.drop_table('sensor_raw_mq5')
    op.drop_table('device_rtc_status')
    op.drop_index(op.f('home_state_snapshots_time_idx'), table_name='home_state_snapshots')
    op.drop_table('home_state_snapshots')
    op.drop_table('sensor_raw_rfid')
    op.drop_table('sensor_raw_sound')
    op.drop_table('sensor_raw_cds')
    op.drop_table('sensor_raw_imu')
    op.drop_table('sensor_raw_dht')
    op.drop_table('sensor_edge_pir')
    op.drop_table('sensor_raw_ultrasonic')
    op.drop_table('devices')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('devices',
    sa.Column('device_id', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('location_label', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('installed_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name='devices_user_id_fkey'),
    sa.PrimaryKeyConstraint('device_id', name='devices_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('sensor_raw_ultrasonic',
    sa.Column('time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('device_id', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('raw_payload', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['device_id'], ['devices.device_id'], name=op.f('sensor_raw_ultrasonic_device_id_fkey')),
    sa.PrimaryKeyConstraint('time', 'device_id', name=op.f('sensor_raw_ultrasonic_pkey'))
    )
    op.create_table('sensor_edge_pir',
    sa.Column('time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('device_id', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('motion_detected', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('confidence', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('motion_direction', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('motion_speed', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('processing_time', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('raw_payload', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['device_id'], ['devices.device_id'], name=op.f('sensor_edge_pir_device_id_fkey')),
    sa.PrimaryKeyConstraint('time', 'device_id', name=op.f('sensor_edge_pir_pkey'))
    )
    op.create_table('sensor_raw_dht',
    sa.Column('time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('device_id', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('temperature', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('humidity', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('heat_index', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('raw_payload', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['device_id'], ['devices.device_id'], name=op.f('sensor_raw_dht_device_id_fkey')),
    sa.PrimaryKeyConstraint('time', 'device_id', name=op.f('sensor_raw_dht_pkey'))
    )
    op.create_table('sensor_raw_imu',
    sa.Column('time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('device_id', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('accel_x', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('accel_y', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('accel_z', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('gyro_x', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('gyro_y', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('gyro_z', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('mag_x', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('mag_y', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('mag_z', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('temperature', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('raw_payload', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['device_id'], ['devices.device_id'], name=op.f('sensor_raw_imu_device_id_fkey')),
    sa.PrimaryKeyConstraint('time', 'device_id', name=op.f('sensor_raw_imu_pkey'))
    )
    op.create_table('sensor_raw_cds',
    sa.Column('time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('device_id', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('analog_value', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('lux_value', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('raw_payload', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['device_id'], ['devices.device_id'], name=op.f('sensor_raw_cds_device_id_fkey')),
    sa.PrimaryKeyConstraint('time', 'device_id', name=op.f('sensor_raw_cds_pkey'))
    )
    op.create_table('sensor_raw_sound',
    sa.Column('time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('device_id', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('raw_payload', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['device_id'], ['devices.device_id'], name=op.f('sensor_raw_sound_device_id_fkey')),
    sa.PrimaryKeyConstraint('time', 'device_id', name=op.f('sensor_raw_sound_pkey'))
    )
    op.create_table('sensor_raw_rfid',
    sa.Column('time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('device_id', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('raw_payload', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['device_id'], ['devices.device_id'], name=op.f('sensor_raw_rfid_device_id_fkey'))
    )
    op.create_table('home_state_snapshots',
    sa.Column('time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('entrance_pir_motion', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('entrance_rfid_status', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('entrance_reed_is_closed', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('livingroom_pir_1_motion', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('livingroom_pir_2_motion', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('livingroom_sound_db', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('livingroom_mq7_co_ppm', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('livingroom_button_state', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('kitchen_pir_motion', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('kitchen_sound_db', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('kitchen_mq5_gas_ppm', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('kitchen_loadcell_1_kg', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('kitchen_loadcell_2_kg', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('kitchen_button_state', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('kitchen_buzzer_is_on', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('bedroom_pir_motion', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('bedroom_sound_db', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('bedroom_mq7_co_ppm', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('bedroom_loadcell_kg', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('bedroom_button_state', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('bathroom_pir_motion', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('bathroom_sound_db', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('bathroom_temp_celsius', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('bathroom_button_state', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('detected_activity', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('alert_level', sa.TEXT(), autoincrement=False, nullable=True, comment='시스템이 판단한 현재 경보 수준 (Normal, Attention, Warning, Emergency)'),
    sa.Column('alert_reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('action_log', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='감지된 상황에 대한 처리 내역 및 결과 (JSON 형식).\n예시 1) \'관심\' 등급 처리:\n{\n  "action_taken": "GUARDIAN_NOTIFICATION",\n  "notified_at": "2025-08-25T10:05:15Z",\n  "result": "USER_ACKNOWLEDGED",\n  "result_time": "2025-08-25T10:06:22Z",\n  "notes": "사용자가 주방 버튼으로 상황 해제함"\n}\n예시 2) \'응급\' 등급 처리:\n{\n  "action_taken": "EMERGENCY_DISPATCH",\n  "dispatched_at": "2025-08-26T03:11:50Z",\n  "dispatch_unit": "119",\n  "result": "SITUATION_RESOLVED_ON_SITE",\n  "result_time": "2025-08-26T03:45:10Z",\n  "notes": "현장 확인 결과 보일러 오작동. 환기 후 정상화."\n}'),
    sa.Column('extra_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True, comment='향후 확장을 위한 예비 JSONB 컬럼'),
    sa.PrimaryKeyConstraint('time', 'user_id', name=op.f('home_state_snapshots_pkey')),
    comment='매 순간의 집 전체 센서 상태를 기록하는 스냅샷 테이블 (Digital Twin State)'
    )
    op.create_index(op.f('home_state_snapshots_time_idx'), 'home_state_snapshots', [sa.literal_column('time DESC')], unique=False)
    op.create_table('device_rtc_status',
    sa.Column('time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('device_id', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('rtc_epoch_s', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('drift_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sync_source', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('raw_payload', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['device_id'], ['devices.device_id'], name=op.f('device_rtc_status_device_id_fkey')),
    sa.PrimaryKeyConstraint('time', 'device_id', name=op.f('device_rtc_status_pkey'))
    )
    op.create_table('sensor_raw_mq5',
    sa.Column('time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('device_id', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('raw_payload', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['device_id'], ['devices.device_id'], name=op.f('sensor_raw_mq5_device_id_fkey')),
    sa.PrimaryKeyConstraint('time', 'device_id', name=op.f('sensor_raw_mq5_pkey'))
    )
    op.create_table('users',
    sa.Column('user_id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('user_role', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('user_name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('phone_number', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('user_id', name='users_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('sensor_raw_flame',
    sa.Column('time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('device_id', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('analog_value', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('flame_detected', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('raw_payload', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['device_id'], ['devices.device_id'], name=op.f('sensor_raw_flame_device_id_fkey')),
    sa.PrimaryKeyConstraint('time', 'device_id', name=op.f('sensor_raw_flame_pkey'))
    )
    op.create_table('sensor_event_button',
    sa.Column('time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('device_id', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('button_state', sa.TEXT(), autoincrement=False, nullable=False, comment='버튼의 물리적 상태 (PRESSED, RELEASED, LONG_PRESS)'),
    sa.Column('event_type', sa.TEXT(), autoincrement=False, nullable=False, comment='버튼 입력의 목적 (crisis_acknowledged, assistance_request, medication_check)'),
    sa.Column('press_duration_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('raw_payload', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.CheckConstraint("button_state = ANY (ARRAY['PRESSED'::text, 'RELEASED'::text, 'LONG_PRESS'::text])", name=op.f('sensor_event_button_state_check')),
    sa.CheckConstraint("event_type = ANY (ARRAY['crisis_acknowledged'::text, 'assistance_request'::text, 'medication_check'::text])", name=op.f('sensor_event_button_event_type_check')),
    sa.ForeignKeyConstraint(['device_id'], ['devices.device_id'], name=op.f('sensor_event_button_device_id_fkey')),
    sa.PrimaryKeyConstraint('time', 'device_id', name=op.f('sensor_event_button_pkey')),
    comment='푸시버튼 입력 이벤트(위기 해제, 복약 체크 등)를 기록하는 테이블'
    )
    op.create_table('actuator_log_servo',
    sa.Column('time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('device_id', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('channel', sa.SMALLINT(), server_default=sa.text('1'), autoincrement=False, nullable=False),
    sa.Column('angle_deg', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('pwm_us', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('raw_payload', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['device_id'], ['devices.device_id'], name=op.f('actuator_log_servo_device_id_fkey')),
    sa.PrimaryKeyConstraint('time', 'device_id', 'channel', name=op.f('actuator_log_servo_pkey'))
    )
    op.create_table('sensor_raw_tcrt5000',
    sa.Column('time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('device_id', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('raw_payload', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['device_id'], ['devices.device_id'], name=op.f('sensor_raw_tcrt5000_device_id_fkey')),
    sa.PrimaryKeyConstraint('time', 'device_id', name=op.f('sensor_raw_tcrt5000_pkey'))
    )
    op.create_table('actuator_log_ir_tx',
    sa.Column('time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('device_id', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('protocol', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('address_hex', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('command_hex', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('repeat_cnt', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('raw_payload', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['device_id'], ['devices.device_id'], name=op.f('actuator_log_ir_tx_device_id_fkey')),
    sa.PrimaryKeyConstraint('time', 'device_id', 'command_hex', name=op.f('actuator_log_ir_tx_pkey'))
    )
    op.create_table('sensor_edge_tilt',
    sa.Column('time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('device_id', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('tilt_detected', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('tilt_angle', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('tilt_direction', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('raw_payload', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('confidence', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('processing_time', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['device_id'], ['devices.device_id'], name=op.f('sensor_edge_tilt_device_id_fkey')),
    sa.PrimaryKeyConstraint('time', 'device_id', name=op.f('sensor_edge_tilt_pkey'))
    )
    op.create_table('user_relationships',
    sa.Column('relationship_id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False),
    sa.Column('subject_user_id', sa.UUID(), autoincrement=False, nullable=False, comment='관계의 주체 (돌봄 제공자, 가족, 관리자 등의 ID)'),
    sa.Column('target_user_id', sa.UUID(), autoincrement=False, nullable=False, comment='관계의 대상 (돌봄을 받는 사용자의 ID)'),
    sa.Column('relationship_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'active'::character varying"), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.CheckConstraint("relationship_type::text = ANY (ARRAY['caregiver'::character varying, 'family'::character varying, 'admin'::character varying]::text[])", name=op.f('check_relationship_type')),
    sa.CheckConstraint("status::text = ANY (ARRAY['pending'::character varying, 'active'::character varying, 'inactive'::character varying]::text[])", name=op.f('check_status')),
    sa.ForeignKeyConstraint(['subject_user_id'], ['users.user_id'], name=op.f('fk_subject_user')),
    sa.ForeignKeyConstraint(['target_user_id'], ['users.user_id'], name=op.f('fk_target_user')),
    sa.PrimaryKeyConstraint('relationship_id', name=op.f('user_relationships_pkey')),
    sa.UniqueConstraint('subject_user_id', 'target_user_id', 'relationship_type', name=op.f('unique_relationship'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    comment='사용자 간의 관계(돌봄, 가족, 관리)를 정의하는 테이블'
    )
    op.create_table('actuator_log_buzzer',
    sa.Column('time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('device_id', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('buzzer_type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('state', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('freq_hz', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('duration_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('raw_payload', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.CheckConstraint("buzzer_type = ANY (ARRAY['active'::text, 'passive'::text])", name=op.f('actuator_log_buzzer_buzzer_type_check')),
    sa.CheckConstraint("state = ANY (ARRAY['ON'::text, 'OFF'::text, 'BEEP'::text])", name=op.f('actuator_log_buzzer_state_check')),
    sa.ForeignKeyConstraint(['device_id'], ['devices.device_id'], name=op.f('actuator_log_buzzer_device_id_fkey')),
    sa.PrimaryKeyConstraint('time', 'device_id', 'state', name=op.f('actuator_log_buzzer_pkey'))
    )
    op.create_table('actuator_log_relay',
    sa.Column('time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('device_id', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('channel', sa.SMALLINT(), server_default=sa.text('1'), autoincrement=False, nullable=False),
    sa.Column('state', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('raw_payload', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.CheckConstraint("state = ANY (ARRAY['ON'::text, 'OFF'::text])", name=op.f('actuator_log_relay_state_check')),
    sa.ForeignKeyConstraint(['device_id'], ['devices.device_id'], name=op.f('actuator_log_relay_device_id_fkey')),
    sa.PrimaryKeyConstraint('time', 'device_id', 'channel', name=op.f('actuator_log_relay_pkey'))
    )
    op.create_table('sensor_raw_temperature',
    sa.Column('time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('device_id', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('temperature_celsius', sa.NUMERIC(), autoincrement=False, nullable=False, comment='섭씨 단위의 온도 값'),
    sa.Column('humidity_percent', sa.NUMERIC(), autoincrement=False, nullable=True, comment='상대 습도 값 (%)'),
    sa.Column('raw_payload', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['device_id'], ['devices.device_id'], name=op.f('sensor_raw_temperature_device_id_fkey')),
    sa.PrimaryKeyConstraint('time', 'device_id', name=op.f('sensor_raw_temperature_pkey')),
    comment='LM35 등 온도 센서의 원시 측정 데이터를 기록하는 테이블'
    )
    op.create_table('sensor_edge_flame',
    sa.Column('time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('device_id', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('flame_detected', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('confidence', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('alert_level', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('raw_payload', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('processing_time', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['device_id'], ['devices.device_id'], name=op.f('sensor_edge_flame_device_id_fkey')),
    sa.PrimaryKeyConstraint('time', 'device_id', name=op.f('sensor_edge_flame_pkey'))
    )
    op.create_table('sensor_raw_loadcell',
    sa.Column('time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('device_id', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('raw_payload', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['device_id'], ['devices.device_id'], name=op.f('sensor_raw_loadcell_device_id_fkey')),
    sa.PrimaryKeyConstraint('time', 'device_id', name=op.f('sensor_raw_loadcell_pkey'))
    )
    op.create_table('sensor_edge_reed',
    sa.Column('time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('device_id', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('switch_state', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('magnetic_field_detected', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('raw_payload', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('confidence', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('magnetic_strength', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('processing_time', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['device_id'], ['devices.device_id'], name=op.f('sensor_edge_reed_device_id_fkey')),
    sa.PrimaryKeyConstraint('time', 'device_id', name=op.f('sensor_edge_reed_pkey'))
    )
    op.create_table('sensor_raw_mq7',
    sa.Column('time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('device_id', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('raw_payload', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['device_id'], ['devices.device_id'], name=op.f('sensor_raw_mq7_device_id_fkey')),
    sa.PrimaryKeyConstraint('time', 'device_id', name=op.f('sensor_raw_mq7_pkey'))
    )
    op.create_table('user_profiles',
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('date_of_birth', sa.DATE(), autoincrement=False, nullable=False, comment='사용자의 생년월일'),
    sa.Column('gender', sa.VARCHAR(length=10), server_default=sa.text("'other'::character varying"), autoincrement=False, nullable=False),
    sa.Column('address', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('address_detail', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('medical_history', sa.TEXT(), autoincrement=False, nullable=True, comment='병력 (예: 고혈압, 당뇨)'),
    sa.Column('significant_notes', sa.TEXT(), autoincrement=False, nullable=True, comment='특이사항 (예: 특정 약물 알러지, 거동 불편)'),
    sa.Column('current_status', sa.TEXT(), autoincrement=False, nullable=True, comment='현재 건강 및 생활 상태'),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.CheckConstraint("gender::text = ANY (ARRAY['male'::character varying, 'female'::character varying, 'other'::character varying]::text[])", name=op.f('check_gender')),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name=op.f('fk_user'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', name=op.f('user_profiles_pkey')),
    comment='사용자의 상세 프로필 및 돌봄 서비스 관련 정보'
    )
    op.drop_index('ix_scheduled_jobs_status', table_name='scheduled_jobs')
    op.drop_index('ix_scheduled_jobs_next_run', table_name='scheduled_jobs')
    op.drop_index(op.f('ix_scheduled_jobs_name'), table_name='scheduled_jobs')
    op.drop_index('ix_scheduled_jobs_is_deleted', table_name='scheduled_jobs')
    op.drop_index('ix_scheduled_jobs_enabled', table_name='scheduled_jobs')
    op.drop_table('scheduled_jobs')
    # ### end Alembic commands ###
