[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "app-server"
version = "0.1.0"
description = "FastAPI-based application server with scheduler and admin UI"
authors = [
    {name = "App Server Team", email = "team@app-server.com"}
]
readme = "README.md"
requires-python = ">=3.12,<3.13"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]

dependencies = [
    # Core Framework
    "fastapi[standard]>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # Database
    "sqlalchemy[asyncio]>=2.0.0",
    "asyncpg>=0.29.0",
    "psycopg2-binary>=2.9.0",
    "alembic>=1.13.0",
    
    # Scheduler
    "apscheduler>=3.10.0",
    
    # Admin UI
    "sqladmin>=0.17.0",
    
    # Authentication & Security
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    
    # HTTP Client
    "httpx>=0.25.0",
    
    # Cache
    "redis>=5.0.0",
    
    # File Storage
    "pydrive2>=1.16.0",
    
    # Dependency Injection
    "dependency-injector>=4.41.0",
    
    # Utilities
    "python-dotenv>=1.0.0",
    "structlog>=23.2.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.0",  # For testing HTTP clients
    
    # Code Quality
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.7.0",
    
    # Development Tools
    "pre-commit>=3.5.0",
    "watchfiles>=0.21.0",
]

monitoring = [
    # Monitoring & Observability
    "prometheus-client>=0.19.0",
    "structlog>=23.2.0",
    "sentry-sdk[fastapi]>=1.38.0",
]

[project.urls]
Homepage = "https://github.com/your-org/app-server"
Documentation = "https://app-server.readthedocs.io"
Repository = "https://github.com/your-org/app-server.git"
Issues = "https://github.com/your-org/app-server/issues"

[project.scripts]
app-server = "app.main:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["app*"]

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["app"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "sqlalchemy.*",
    "alembic.*",
    "redis.*",
    "pydrive2.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
